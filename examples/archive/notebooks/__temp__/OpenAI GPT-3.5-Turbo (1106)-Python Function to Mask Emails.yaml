candidate_obj:
  candidate_type: OPENAI
  metadata:
    name: OpenAI GPT-3.5-Turbo (1106)
  model_parameters:
    max_tokens: 4096
    model_name: gpt-3.5-turbo-1106
    seed: 42
    system_message: You are a helpful AI assistant.
    temperature: 0.01
cost: 0.001026
eval_obj:
  metadata:
    description: Creates a python function that uses regex to mask all emails.
    difficulty: 1
    name: Python Function to Mask Emails
    source: Anaconda. The ideal_responses were generated by ChatGPT 4.0 Turbo.
    tags:
    - python
    - regex
    uuid: 8C297EA8-42B9-4237-9571-5C95A042E3BA
    version: 1
  test_sequence:
  - checks:
    - check_type: CONTAINS
      value: re.sub(
    - check_type: REGEX
      pattern: 'def mask_emails\([a-zA-Z_]+\: str\) -> str\:'
    - check_type: PYTHON_CODE_BLOCKS_PRESENT
    ideal_response: "Certainly! Below is a Python function named `mask_emails` which\
      \ uses regular expressions (regex) to mask all email addresses in a given string.\
      \ It replaces the local part of each email with `[MASKED]`, while retaining\
      \ the domain.\n\n```python\nimport re\nfrom typing import AnyStr\n\ndef mask_emails(text:\
      \ AnyStr) -> AnyStr:\n    \"\"\"\n    Masks all email addresses in the provided\
      \ text. The local part of each email is replaced with [MASKED],\n    while the\
      \ domain is retained.\n\n    Args:\n    text (AnyStr): The string containing\
      \ email addresses to be masked.\n\n    Returns:\n    AnyStr: The text with email\
      \ addresses masked.\n    \"\"\"\n    # Regular expression to match email addresses\n\
      \    email_regex = r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+'\n\n    # Function to replace\
      \ the local part of the email with [MASKED]\n    def mask_email(match: re.Match)\
      \ -> str:\n        email = match.group(0)\n        local, domain = email.split('@',\
      \ 1)\n        return f'[MASKED]@{domain}'\n\n    # Replace all occurrences of\
      \ email addresses in the text\n    return re.sub(email_regex, mask_email, text)\n\
      \n# Example usage\ntext_with_emails = \"Contact us at hello@example.com or support@domain.org\
      \ for more information.\"\nmasked_text = mask_emails(text_with_emails)\nprint(masked_text)\n\
      ```\n\nThis function will take a string as input, search for all patterns that\
      \ match the regex for an email address, and mask each email's local part while\
      \ keeping the domain part unchanged. The `mask_email` function is a helper function\
      \ used within `re.sub` to replace each found email address.\n\nThe example usage\
      \ at the end demonstrates how the function can be used on a sample text containing\
      \ email addresses.\n"
    prompt: Create a python function called `mask_emails` that uses regex to mask
      all emails. For each email in the format of `x@y.z`, the local part (`x`) should
      be masked with [MASKED], but the domain (`@y.z`) should be retained. Use type
      hints and docstrings.
  - checks:
    - check_type: CONTAINS
      value: assert mask_emails(
    - check_type: PYTHON_CODE_BLOCKS_PRESENT
    - check_type: PYTHON_CODE_BLOCKS_RUN
      code_setup: 'import re

        '
      functions:
      - "def verify_mask_emails_with_no_email_returns_original_string(code_blocks:\
        \ list[str]) -> bool:\n    value = 'This is a string with no email addresses'\n\
        \    return mask_emails(value) == value\n"
      - "def verify_mask_emails_with_single_email_returns_masked_string(code_blocks:\
        \ list[str]) -> bool:\n    value = 'This is a string with an email Susie@McSusers.com.'\n\
        \    return mask_emails(value) == 'This is a string with an email [MASKED]@McSusers.com.'\n"
    ideal_response: "To test the `mask_emails` function thoroughly, we can create\
      \ a set of assertion statements. These assertions will check various scenarios\
      \ including normal cases, edge cases, and potential failure points. Here's a\
      \ set of assertions to cover a comprehensive range of test cases:\n\n```python\n\
      # Test with a standard email\nassert mask_emails(\"user@example.com\") == \"\
      [MASKED]@example.com\", \"Failed to mask standard email\"\n# Test with multiple\
      \ emails in a string\nassert mask_emails(\"Emails: user1@example.com, user2@test.org\"\
      ) == \"Emails: [MASKED]@example.com, [MASKED]@test.org\", \"Failed to mask multiple\
      \ emails\"\n# Test with emails having different domain lengths\nassert mask_emails(\"\
      user@domain.co.uk\") == \"[MASKED]@domain.co.uk\", \"Failed to mask email with\
      \ different domain lengths\"\n# Test with emails having subdomains\nassert mask_emails(\"\
      user@sub.domain.com\") == \"[MASKED]@sub.domain.com\", \"Failed to mask email\
      \ with subdomains\"\n# Test with emails having numeric, hyphen, and underscore\
      \ characters\nassert mask_emails(\"user-name_123@example.com\") == \"[MASKED]@example.com\"\
      , \"Failed to mask email with numeric, hyphen, and underscore characters\"\n\
      # Test with no emails in the string\nassert mask_emails(\"No emails here\")\
      \ == \"No emails here\", \"Failed when no emails are present\"\n# Test with\
      \ an empty string\nassert mask_emails(\"\") == \"\", \"Failed on empty string\"\
      \n# Test with a string containing multiple types of emails\nassert mask_emails(\"\
      Emails: user@example.com, another_user@test.co, yet.another-user@subdomain.domain.net\"\
      ) == \"Emails: [MASKED]@example.com, [MASKED]@test.co, [MASKED]@subdomain.domain.net\"\
      , \"Failed to mask multiple types of emails\"\n# Print a success message if\
      \ all assertions pass\nprint(\"All tests passed successfully.\")\n```\n\nEach\
      \ assertion checks a different aspect of the email masking function:\n\n   \
      \ Handling of standard email formats.\n    Correct processing of multiple emails\
      \ in a single string.\n    Ability to handle emails with various domain lengths\
      \ and structures, including subdomains.\n    Correct handling of emails with\
      \ numeric, hyphen, underscore, and other allowed characters in the local part.\n\
      \    Proper behavior when no emails are present in the input string.\n    Handling\
      \ of an empty string as input.\n    Masking emails with special characters in\
      \ the local part.\n    Dealing with a mix of different types of email formats\
      \ in a single string.\n\nIf any of these assertions fail, it will raise an `AssertionError`\
      \ with a message indicating which test case failed. If all assertions pass,\
      \ it prints a success message. This set of tests ensures that the `mask_emails`\
      \ function behaves as expected in a variety of scenarios.\n"
    prompt: Create a set of assertion statements that test the function.
num_code_blocks: 2
responses:
- "Here's a Python function called `mask_emails` that uses regex to mask all emails:\n\
  \n```python\nimport re\n\ndef mask_emails(text: str) -> str:\n    \"\"\"\n    Mask\
  \ all emails in the given text.\n    \n    Args:\n    text (str): The input text\
  \ containing emails to be masked.\n    \n    Returns:\n    str: The text with masked\
  \ emails.\n    \"\"\"\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\
  .[A-Z|a-z]{2,}\\b'\n    masked_text = re.sub(email_pattern, '[MASKED]@[MASKED]',\
  \ text)\n    return masked_text\n```\n\nYou can use this function to mask emails\
  \ in a given text by passing the text as an argument to the `mask_emails` function."
- 'Certainly! Here are some assertion statements to test the `mask_emails` function:


  ```python

  # Test case 1: Single email in the text

  assert mask_emails("Please contact me at john.doe@example.com") == "Please contact
  me at [MASKED]@[MASKED]"


  # Test case 2: Multiple emails in the text

  assert mask_emails("Email me at jane.smith@example.com or john.doe@example.net")
  == "Email me at [MASKED]@[MASKED] or [MASKED]@[MASKED]"


  # Test case 3: No email in the text

  assert mask_emails("This is a sample text without any email") == "This is a sample
  text without any email"

  ```


  These assertion statements will help ensure that the `mask_emails` function works
  as expected.'
results:
- - metadata:
      check_metadata: {}
      check_type: CONTAINS
      check_value: re.sub(
    result_type: PASS_FAIL
    success: true
    value: true
  - metadata:
      check_metadata: {}
      check_pattern: 'def mask_emails\([a-zA-Z_]+\: str\) -> str\:'
      check_type: REGEX
    result_type: PASS_FAIL
    success: true
    value: true
  - metadata:
      check_type: PYTHON_CODE_BLOCKS_PRESENT
      code_blocks:
      - "import re\n\ndef mask_emails(text: str) -> str:\n    \"\"\"\n    Mask all\
        \ emails in the given text.\n    \n    Args:\n    text (str): The input text\
        \ containing emails to be masked.\n    \n    Returns:\n    str: The text with\
        \ masked emails.\n    \"\"\"\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\
        .[A-Z|a-z]{2,}\\b'\n    masked_text = re.sub(email_pattern, '[MASKED]@[MASKED]',\
        \ text)\n    return masked_text"
      - '# Test case 1: Single email in the text

        assert mask_emails("Please contact me at john.doe@example.com") == "Please
        contact me at [MASKED]@[MASKED]"


        # Test case 2: Multiple emails in the text

        assert mask_emails("Email me at jane.smith@example.com or john.doe@example.net")
        == "Email me at [MASKED]@[MASKED] or [MASKED]@[MASKED]"


        # Test case 3: No email in the text

        assert mask_emails("This is a sample text without any email") == "This is
        a sample text without any email"'
      min_code_blocks: 1
      num_code_blocks: 1
    result_type: PASS_FAIL
    success: true
    value: true
- - metadata:
      check_metadata: {}
      check_type: CONTAINS
      check_value: assert mask_emails(
    result_type: PASS_FAIL
    success: true
    value: true
  - metadata:
      check_type: PYTHON_CODE_BLOCKS_PRESENT
      code_blocks:
      - "import re\n\ndef mask_emails(text: str) -> str:\n    \"\"\"\n    Mask all\
        \ emails in the given text.\n    \n    Args:\n    text (str): The input text\
        \ containing emails to be masked.\n    \n    Returns:\n    str: The text with\
        \ masked emails.\n    \"\"\"\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\
        .[A-Z|a-z]{2,}\\b'\n    masked_text = re.sub(email_pattern, '[MASKED]@[MASKED]',\
        \ text)\n    return masked_text"
      - '# Test case 1: Single email in the text

        assert mask_emails("Please contact me at john.doe@example.com") == "Please
        contact me at [MASKED]@[MASKED]"


        # Test case 2: Multiple emails in the text

        assert mask_emails("Email me at jane.smith@example.com or john.doe@example.net")
        == "Email me at [MASKED]@[MASKED] or [MASKED]@[MASKED]"


        # Test case 3: No email in the text

        assert mask_emails("This is a sample text without any email") == "This is
        a sample text without any email"'
      min_code_blocks: 1
      num_code_blocks: 2
    result_type: PASS_FAIL
    success: true
    value: true
  - metadata:
      check_type: PYTHON_CODE_BLOCKS_RUN
      code_block_check_errors:
      - null
      - null
      code_block_check_results:
      - true
      - false
      code_block_errors:
      - null
      - null
      code_blocks:
      - "import re\n\ndef mask_emails(text: str) -> str:\n    \"\"\"\n    Mask all\
        \ emails in the given text.\n    \n    Args:\n    text (str): The input text\
        \ containing emails to be masked.\n    \n    Returns:\n    str: The text with\
        \ masked emails.\n    \"\"\"\n    email_pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\
        .[A-Z|a-z]{2,}\\b'\n    masked_text = re.sub(email_pattern, '[MASKED]@[MASKED]',\
        \ text)\n    return masked_text"
      - '# Test case 1: Single email in the text

        assert mask_emails("Please contact me at john.doe@example.com") == "Please
        contact me at [MASKED]@[MASKED]"


        # Test case 2: Multiple emails in the text

        assert mask_emails("Email me at jane.smith@example.com or john.doe@example.net")
        == "Email me at [MASKED]@[MASKED] or [MASKED]@[MASKED]"


        # Test case 3: No email in the text

        assert mask_emails("This is a sample text without any email") == "This is
        a sample text without any email"'
      num_code_block_checks: 2
      num_code_block_checks_successful: 1
      num_code_blocks: 2
      num_code_blocks_successful: 2
    result_type: SCORE
    success: false
    success_threshold: 1.0
    value: 0.75
total_time_seconds: 9.83340072631836
