metadata:
  uuid: 8C297EA8-42B9-4237-9571-5C95A042E3BA
  version: 1
  name: Python Function to Mask Emails
  description: Creates a python function that uses regex to mask all emails.
  difficulty: 1  # 1-5
  tags:
    - python
    - regex
  source: Anaconda. The ideal_responses were generated by ChatGPT 4.0 Turbo.
prompt_sequence:
  - prompt: Create a python function called `mask_emails` that uses regex to mask all emails. For each email in the format of `x@y.z`, the local part (`x`) should be masked with [MASKED], but the domain (`@y.z`) should be retained. Use type hints and docstrings.
    checks:
      - check_type: CONTAINS
        value: re.sub(
      - check_type: REGEX
        pattern: "def mask_emails\\([a-zA-Z_]+\\: str\\) -> str\\:"
      - check_type: PYTHON_CODE_BLOCKS_PRESENT
  - prompt: Create a set of assertion statements that test the function.
    checks:
      - check_type: CONTAINS
        value: assert mask_emails(
      - check_type: PYTHON_CODE_BLOCKS_PRESENT
      - check_type: PYTHON_CODE_BLOCK_TESTS
        code_setup: |
          import re
        code_tests:
          - |
            def verify_mask_emails_with_no_email_returns_original_string(code_blocks: list[str]) -> bool:
                value = 'This is a string with no email addresses'
                return mask_emails(value) == value
          - |
            def verify_mask_emails_with_single_email_returns_masked_string(code_blocks: list[str]) -> bool:
                value = 'This is a string with an email Susie@McSusers.com.'
                return mask_emails(value) == 'This is a string with an email [MASKED]@McSusers.com.'
